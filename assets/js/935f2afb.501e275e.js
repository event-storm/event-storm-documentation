"use strict";(self.webpackChunkevent_storm_documentation=self.webpackChunkevent_storm_documentation||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction to Event Storm","href":"/docs/introduction","docId":"introduction"},{"type":"link","label":"Motivation","href":"/docs/motivation","docId":"motivation"},{"type":"link","label":"The terminology","href":"/docs/terminology","docId":"terminology"},{"type":"category","label":"Main concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"The bigger picture","href":"/docs/concepts/overview","docId":"concepts/overview"},{"type":"link","label":"Performance impact","href":"/docs/concepts/performance","docId":"concepts/performance"},{"type":"link","label":"How the API is designed?","href":"/docs/concepts/api","docId":"concepts/api"}]},{"type":"link","label":"FAQ","href":"/docs/faq","docId":"faq"},{"type":"category","label":"API reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"API Overview","href":"/docs/api-reference/overview","docId":"api-reference/overview"},{"type":"link","label":"Storm","href":"/docs/api-reference/storm","docId":"api-reference/storm"},{"type":"link","label":"Model","href":"/docs/api-reference/model","docId":"api-reference/model"},{"type":"link","label":"Model with state derivation","href":"/docs/api-reference/virtualmodel","docId":"api-reference/virtualmodel"},{"type":"link","label":"Make the store persistant","href":"/docs/api-reference/persistency","docId":"api-reference/persistency"}]},{"type":"category","label":"Official bindings","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Supported bindings","href":"/docs/bindings/overview","docId":"bindings/overview"},{"type":"category","label":"React Event Storm","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/bindings/react/overview","docId":"bindings/react/overview"},{"type":"link","label":"Subscription types","href":"/docs/bindings/react/subscription","docId":"bindings/react/subscription"},{"type":"category","label":"API reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"useStorm","href":"/docs/bindings/react/api-reference/usestorm","docId":"bindings/react/api-reference/usestorm"},{"type":"link","label":"usePublish","href":"/docs/bindings/react/api-reference/usepublish","docId":"bindings/react/api-reference/usepublish"},{"type":"link","label":"useModels","href":"/docs/bindings/react/api-reference/usemodels","docId":"bindings/react/api-reference/usemodels"}]}]}]}]},"docs":{"api-reference/model":{"id":"api-reference/model","title":"Model","description":"Creating a single information unit. Use this method to have synchronized updates for all the subscribers. Model can accept any JS type","sidebar":"tutorialSidebar"},"api-reference/overview":{"id":"api-reference/overview","title":"API Overview","description":"The Event Storm library is providing the following top level exports: createStorm, createModel, persisted, createVirtualModel","sidebar":"tutorialSidebar"},"api-reference/persistency":{"id":"api-reference/persistency","title":"Make the store persistant","description":"You can easily make your store\'s any segment to be persisted by using the respective function.","sidebar":"tutorialSidebar"},"api-reference/storm":{"id":"api-reference/storm","title":"Storm","description":"The library will organize subscrition and data store updates in such a manner to keep track of individual subscription and individual updates. In other words, The Event Storm claims to update only for the given subscription.","sidebar":"tutorialSidebar"},"api-reference/virtualmodel":{"id":"api-reference/virtualmodel","title":"Model with state derivation","description":"It is possible to derive the state of the model and compose abstraction on that derivation. The abstraction is called virtual model","sidebar":"tutorialSidebar"},"bindings/overview":{"id":"bindings/overview","title":"Supported bindings","description":"The library officially supports the following bindings. React - The library provides simple hooks on top of the Event Storm functionality. The binding is about 0.4kb","sidebar":"tutorialSidebar"},"bindings/react/api-reference/usemodels":{"id":"bindings/react/api-reference/usemodels","title":"useModels","description":"The Event Storm models also can be used with React components. useModels can receive a models array, subscribe to them and return their last states","sidebar":"tutorialSidebar"},"bindings/react/api-reference/usepublish":{"id":"bindings/react/api-reference/usepublish","title":"usePublish","description":"The publish hook, is simply re exporting of the storm.publish method. Arguments: storm (the storm object, for which the publish method will be provided)","sidebar":"tutorialSidebar"},"bindings/react/api-reference/usestorm":{"id":"bindings/react/api-reference/usestorm","title":"useStorm","description":"The storm inside react components can be used with the help of useStorm hook. Arguments: store, selectFragment, options","sidebar":"tutorialSidebar"},"bindings/react/overview":{"id":"bindings/react/overview","title":"Overview","description":"The React Event Storm is providing a lightweight, minimal abstraction for the Event Storm library","sidebar":"tutorialSidebar"},"bindings/react/subscription":{"id":"bindings/react/subscription","title":"Subscription types","description":"The Event Storm is presenting 3 levels of subscription: active subscription, passive subscription, condition-based subscription","sidebar":"tutorialSidebar"},"concepts/api":{"id":"concepts/api","title":"How the API is designed?","description":"The API of the library entities is designed to be consistent in provided entities, provide useful subscription types and configurations, require minimal changes when migrating from other libraries","sidebar":"tutorialSidebar"},"concepts/overview":{"id":"concepts/overview","title":"The bigger picture","description":"The Event Storm library is focused on providing a high performance in memory data store. Focusing on performance, it also provides a simple and familiar API","sidebar":"tutorialSidebar"},"concepts/performance":{"id":"concepts/performance","title":"Performance impact","description":"The library addressed the following areas regarding the performance: bundle size, maintenance cost, minimal data processing","sidebar":"tutorialSidebar"},"faq":{"id":"faq","title":"FAQ","description":"Frequently Asked Questions. When should I use Event Storm? The Event Storm is a general purpose state management solution","sidebar":"tutorialSidebar"},"introduction":{"id":"introduction","title":"Introduction to Event Storm","description":"Event Storm helps to organize and manage your application\'s state. The library is designed to be framework and platform agnostics.","sidebar":"tutorialSidebar"},"motivation":{"id":"motivation","title":"Motivation","description":"The Event Storm has been created to solve the efficient data storage and management problems","sidebar":"tutorialSidebar"},"terminology":{"id":"terminology","title":"The terminology","description":"The Event Storm is based on event sourcing technology. To organize the system you need to define what information needs to be considered as a source","sidebar":"tutorialSidebar"}}}')}}]);